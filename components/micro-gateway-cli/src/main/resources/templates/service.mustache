import ballerina/log;
import ballerina/http;
import ballerina/swagger;
import ballerina/config;
{{#if containerConfig.hasDocker}}import ballerinax/docker;{{/if}}
{{#if containerConfig.hasKubernetes}}import ballerinax/kubernetes;{{/if}}

import wso2/gateway;

{{#equals endpointConfig.endpointType "http"}}
{{#endpointConfig.prodEndpoints}}{{>httpEndpoint}}{{/endpointConfig.prodEndpoints}}
{{#endpointConfig.sandEndpoints}}{{>httpEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.endpointType "load_balance"}}
{{#endpointConfig.prodEndpoints}}{{>lbEndpoint}}{{/endpointConfig.prodEndpoints}}
{{#endpointConfig.sandEndpoints}}{{>lbEndpoint}}{{/endpointConfig.sandEndpoints}}
{{/equals}}
{{#equals endpointConfig.endpointType "failover"}}
{{#endpointConfig.prodFailoverEndpoints}}{{>failoverEndpoint}}{{/endpointConfig.prodFailoverEndpoints}}
{{#endpointConfig.sandFailoverEndpoints}}{{>failoverEndpoint}}{{/endpointConfig.sandFailoverEndpoints}}
{{/equals}}

{{>docker}}
{{>kubernetes}}

@swagger:ServiceInfo { {{#info}}
    title: "{{title}}"{{#description}},
    description: "{{description}}"{{/description}},
    serviceVersion: "{{version}}"{{#termsOfService}},
    termsOfService: "{{termsOfService}}"{{/termsOfService}}{{#contact}},
    contact: {name: "{{contact.name}}", email: "{{contact.email}}", url: "{{contact.url}}"}{{/contact}}{{#license}},
    license: {name: "{{license.name}}", url: "{{license.url}}"}{{/license}}{{/info}}{{#if tags}},
    tags: [{{#tags}}
        {name: "{{name}}", description: "{{description}}", {{=<% %>=}}externalDocs: <%>doc%><%={{ }}=%>}{{#unless @last}},{{/unless}}{{/tags}}
    ]{{/if}}{{#if externalDocs}},
    externalDocs: {{>doc}}{{/if}}{{#if security}},
    security: [{{#security}}
        {{>security}}{{/security}}
    ]{{/if}}
}

@http:ServiceConfig {
    basePath: "{{api.context}}{{#unless api.isDefaultVersion}}/{{api.version}}{{/unless}}",{{!-- {{only one base path is allowed for all  endpoints}} --}}
    authConfig:{
        authProviders:["oauth2"]
    },
    cors: {
            allowOrigins: [{{#api.corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowOrigins}}],
            allowCredentials: {{api.corsConfiguration.accessControlAllowCredentials}},
            allowHeaders: [{{#api.corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowHeaders}}]
        }
}

@gateway:API {
    publisher:"{{api.provider}}",
    name:"{{api.name}}",
    apiVersion: "{{api.version}}" {{#if api.authorizationHeader}},
    authorizationHeader : "{{api.authorizationHeader}}" {{/if}}
}
service<http:Service> {{cut qualifiedServiceName " "}} bind apiListener,apiSecureListener {
{{#paths}}{{#value}}{{#operations}}{{#value}}
    @swagger:ResourceInfo {
        summary: "{{summary}}"{{#if tags}},
        tags: [{{#tags}}"{{.}}"{{#unless @last}},{{/unless}}{{/tags}}]{{/if}}{{#if description}},
        description: "{{description}}"{{/if}}{{#if externalDocs}},
        externalDocs: {{>doc}}{{/if}}{{#if parameters}},
        parameters: [{{#parameters}}
            {
                name: "{{name}}",
                inInfo: "{{in}}",
                description: "{{description}}", {{#required}}
                required: {{required}},{{/required}} {{#deprecated}}
                discontinued: {{deprecated}},{{/deprecated}}
                allowEmptyValue: "{{allowEmptyValue}}"
            }{{#unless @last}},{{/unless}}{{/parameters}}
        ]{{/if}}
    }
    @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}",
        authConfig:{
            authProviders:["oauth2"] {{#unless isSecured}},
            authentication:{enabled:false} {{/unless}} {{#if scope}},
            scopes: ["{{scope}}"] {{/if}}

        }
    }
    @gateway:RateLimit{policy : "{{resourceTier}}"}
    {{operationId}} (endpoint outboundEp, http:Request req) {
    {{#if api.isDefaultVersion}}
    string urlPostfix = untaint req.rawPath.replace("{{api.context}}","");
    {{else}}
    string urlPostfix = untaint req.rawPath.replace("{{api.context}}/{{api.version}}","");
    {{/if}}
        http:Response|error clientResponse;
        {{#endpointConfig.prodEndpoints}}
            {{#endpointConfig.sandEndpoints}}
                if("PRODUCTION" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                    clientResponse = {{qualifiedServiceName}}_PROD_EP->forward(urlPostfix, req);
                } else {
                    clientResponse = {{qualifiedServiceName}}_SAND_EP->forward(urlPostfix, req);
                }
            {{/endpointConfig.sandEndpoints}}
            {{^endpointConfig.sandEndpoints}}
                if("PRODUCTION" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                    clientResponse = {{qualifiedServiceName}}_PROD_EP->forward(urlPostfix, req);
                } else {
                    http:Response res = new;
                    res.statusCode = 403;
                    json payload = {
                        ERROR_CODE: "900901",
                        ERROR_MESSAGE: "Sandbox key offered to the API with no sandbox endpoint"
                    };
                    runtime:getInvocationContext().attributes["error_code"] = "900901";
                    res.setPayload(payload);
                    clientResponse = res;
                }
            {{/endpointConfig.sandEndpoints}}
        {{/endpointConfig.prodEndpoints}}
        {{^endpointConfig.prodEndpoints}}
            if("SANDBOX" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
                clientResponse = {{qualifiedServiceName}}_SAND_EP->forward(urlPostfix, req);
            } else {
                http:Response res = new;
                res.statusCode = 403;
                json payload = {
                    ERROR_CODE: "900901",
                    ERROR_MESSAGE: "Production key offered to the API with no production endpoint"
                };
                runtime:getInvocationContext().attributes["error_code"] = "900901";
                res.setPayload(payload);
                clientResponse = res;
            }
        {{/endpointConfig.prodEndpoints}}

        match clientResponse {

            http:Response res => {
                outboundEp->respond(res) but { error e =>
                log:printError("Error sending response", err = e) };
            }

            error err => {
                http:Response res = new;
                res.statusCode = 500;
                res.setPayload(err.message);
                outboundEp->respond(res) but { error e =>
                log:printError("Error sending response", err = e) };
            }
        }
    }
{{/value}}{{/operations}}{{/value}}{{/paths}}
}