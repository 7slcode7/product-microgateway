import ballerina/http;
import wso2/gateway;
import ballerina/log;

@http:ServiceConfig {
    basePath:"/authorize"
    {{#corsConfiguration.corsConfigurationEnabled}},
        cors: {
             allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],
             allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},
             allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],
             allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]
        }
    {{/corsConfiguration.corsConfigurationEnabled}}
}
service authorizeService on tokenListenerEndpoint {

    @http:ResourceConfig {
        path: "/*"
    }
    resource function authorizeResource(http:Caller caller, http:Request req) {
        gateway:checkExpectHeaderPresent(req);
        http:Client tokenEndpointClient = gateway:getTokenEndpoint();
        var response = tokenEndpointClient->forward(gateway:getConfigValue(gateway:KM_CONF_INSTANCE_ID, gateway:KM_TOKEN_CONTEXT, "/oauth2") +
                 <@untainted>req.rawPath, req);
        http:Response forwardedResponse = new;
        if(response is http:Response) {
            forwardedResponse = response;
        } else {
            http:Response errorResponse = new;
            json errMsg = { "error": "error occurred while invoking the authorize endpoint" };
            errorResponse.setJsonPayload(errMsg);
            forwardedResponse = errorResponse;
        }
        var result = caller->respond(forwardedResponse);
        if (result is error) {
           log:printError("Error when responding during the authorize endpoint request", err = result);
        }

    }
}

@http:ServiceConfig {
    basePath:"/revoke"
    {{#corsConfiguration.corsConfigurationEnabled}},
        cors: {
             allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],
             allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},
             allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],
             allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]
        }
    {{/corsConfiguration.corsConfigurationEnabled}}
}
service revokeService on tokenListenerEndpoint {

    @http:ResourceConfig {
        path: "/*"
    }
    resource function revokeResource(http:Caller caller, http:Request req) {
        gateway:checkExpectHeaderPresent(req);
        http:Client tokenEndpointClient = gateway:getTokenEndpoint();
        var response = tokenEndpointClient->forward(gateway:getConfigValue(gateway:KM_CONF_INSTANCE_ID, gateway:KM_TOKEN_CONTEXT, "/oauth2") +
             <@untainted>req.rawPath, req);
        http:Response forwardedResponse = new;
        if(response is http:Response) {
            forwardedResponse = response;
        } else {
            http:Response errorResponse = new;
            json errMsg = { "error": "error occurred while invoking the revoke endpoint" };
            errorResponse.setJsonPayload(errMsg);
            forwardedResponse = errorResponse;
        }
        var result = caller->respond(forwardedResponse);
        if (result is error) {
           log:printError("Error when responding during the revoke endpoint request", err = result);
        }

    }
}

@http:ServiceConfig {
    basePath:"/token"
    {{#corsConfiguration.corsConfigurationEnabled}},
        cors: {
             allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],
             allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},
             allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],
             allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]
        }
    {{/corsConfiguration.corsConfigurationEnabled}}
}
service tokenService on tokenListenerEndpoint {

    @http:ResourceConfig {
        path: "/*"
    }
    resource function tokenResource(http:Caller caller, http:Request req) {
        gateway:checkExpectHeaderPresent(req);
        http:Client tokenEndpointClient = gateway:getTokenEndpoint();
        var response = tokenEndpointClient->forward(gateway:getConfigValue(gateway:KM_CONF_INSTANCE_ID, gateway:KM_TOKEN_CONTEXT, "/oauth2") +
                 <@untainted>req.rawPath, req);
        http:Response forwardedResponse = new;
        if(response is http:Response) {
            forwardedResponse = response;
        } else {
            http:Response errorResponse = new;
            json errMsg = { "error": "error occurred while invoking the token endpoint" };
            errorResponse.setJsonPayload(errMsg);
            forwardedResponse = errorResponse;
        }
        var result = caller->respond(forwardedResponse);
        if (result is error) {
           log:printError("Error when responding during the token endpoint request", err = result);
        }
    }
}

@http:ServiceConfig {
    basePath:"/userinfo"
    {{#corsConfiguration.corsConfigurationEnabled}},
        cors: {
             allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],
             allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},
             allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],
             allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}"{{.}}"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]
        }
    {{/corsConfiguration.corsConfigurationEnabled}}
}
service userInfoService on tokenListenerEndpoint {

    @http:ResourceConfig {
        path: "/*"
    }
    resource function userInfoResource(http:Caller caller, http:Request req) {
        gateway:checkExpectHeaderPresent(req);
        http:Client tokenEndpointClient = gateway:getTokenEndpoint();
        var response = tokenEndpointClient->forward(gateway:getConfigValue(gateway:KM_CONF_INSTANCE_ID, gateway:KM_TOKEN_CONTEXT, "/oauth2") +
                 <@untainted>req.rawPath, req);
        http:Response forwardedResponse = new;
        if(response is http:Response) {
            forwardedResponse = response;
        } else {
            http:Response errorResponse = new;
            json errMsg = { "error": "error occurred while invoking the user info endpoint" };
            errorResponse.setJsonPayload(errMsg);
            forwardedResponse = errorResponse;
        }
        var result = caller->respond(forwardedResponse);
        if (result is error) {
           log:printError("Error when responding during the user info endpoint request", err = result);
        }
    }
}
